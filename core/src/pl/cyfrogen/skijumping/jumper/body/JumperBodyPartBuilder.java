package pl.cyfrogen.skijumping.jumper.body;


import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Vector2;

import pl.cyfrogen.skijumping.character.BodyPart;
import pl.cyfrogen.skijumping.character.CurvePath;
import pl.cyfrogen.skijumping.character.MeshVertex;
import pl.cyfrogen.skijumping.jumper.JumperOutfitTextures;

public class JumperBodyPartBuilder {
    private static final int CURVE_POINTS_MESH = 3; //points with every bezier curve will be generated
    private static final int CURVE_POINTS_JOINT = 3; //points with every joint bezier curve will be generated
    private static final int BETWEEN_POINTS_JOINT = 1; //points between every two parallel points in joint (to make texture placing better)
    private static final int BETWEEN_POINTS_MESH = 1; //points between every two parallel points (to make texture placing better)
    private final JumperOutfitTextures textures;
    ShapeRenderer renderer;
    SpriteBatch batch;

    //GENERATED BY CHARACTER EDITOR
    public Vector2 bg_point = new Vector2(-0.2f,-0.20000005f);
    public Vector2 upper_torso_p1 = new Vector2(74.849205f,155.90434f);
    public Vector2 upper_torso_p2 = new Vector2(70.435814f,128.9881f);
    public Vector2 upper_torso_p3 = new Vector2(96.496124f,129.22592f);
    public Vector2 upper_torso_p4 = new Vector2(87.7873f,155.78041f);
    public Vector2 lower_torso_joint_p1 = new Vector2(71.215965f,120.08619f);
    public Vector2 lower_torso_joint_p2 = new Vector2(96.42935f,119.41732f);
    public Vector2 upper_torso_cp1 = new Vector2(69.161766f,147.22379f);
    public Vector2 upper_torso_cp2 = new Vector2(69.02028f,137.60315f);
    public Vector2 upper_torso_cp3 = new Vector2(97.6921f,152.50589f);
    public Vector2 upper_torso_cp4 = new Vector2(90.06182f,148.18802f);
    public Vector2 lower_torso_joint_cp1 = new Vector2(70.78878f,126.14328f);
    public Vector2 lower_torso_joint_cp2 = new Vector2(70.92516f,123.22682f);
    public Vector2 lower_torso_joint_cp3 = new Vector2(96.52073f,121.90783f);
    public Vector2 lower_torso_joint_cp4 = new Vector2(96.30689f,124.75031f);
    public Vector2 lower_torso_point_p1 = new Vector2(70.06712f,106.28733f);
    public Vector2 lower_torso_point_p2 = new Vector2(95.667915f,106.07919f);
    public Vector2 lower_torso_point_cp1 = new Vector2(71.54872f,114.734604f);
    public Vector2 lower_torso_point_cp2 = new Vector2(70.98985f,111.26961f);
    public Vector2 lower_torso_point_cp3 = new Vector2(96.282166f,108.68674f);
    public Vector2 lower_torso_point_cp4 = new Vector2(96.231026f,113.16844f);
    public Vector2 lower_torso_op = new Vector2(83.967285f,124.53069f);
    public Vector2 upper_leg_joint_p1 = new Vector2(71.59346f,96.50491f);
    public Vector2 upper_leg_joint_p2 = new Vector2(94.54708f,95.945885f);
    public Vector2 upper_leg_joint_cp1 = new Vector2(69.44272f,102.74901f);
    public Vector2 upper_leg_joint_cp2 = new Vector2(69.78961f,99.62696f);
    public Vector2 upper_leg_joint_cp3 = new Vector2(95.04922f,99.87851f);
    public Vector2 upper_leg_joint_cp4 = new Vector2(95.453316f,102.62578f);
    public Vector2 upper_leg_p1 = new Vector2(74.56199f,65.11059f);
    public Vector2 upper_leg_p2 = new Vector2(93.143745f,64.82546f);
    public Vector2 upper_leg_cp1 = new Vector2(73.02339f,92.27796f);
    public Vector2 upper_leg_cp2 = new Vector2(73.41976f,82.10533f);
    public Vector2 upper_leg_cp3 = new Vector2(95.15585f,79.719696f);
    public Vector2 upper_leg_cp4 = new Vector2(94.20943f,91.24386f);
    public Vector2 lower_leg_joint_p1 = new Vector2(75.770294f,55.16104f);
    public Vector2 lower_leg_joint_p2 = new Vector2(91.886826f,55.042892f);
    public Vector2 lower_leg_joint_cp1 = new Vector2(75.163414f,61.59967f);
    public Vector2 lower_leg_joint_cp2 = new Vector2(75.77817f,57.98801f);
    public Vector2 lower_leg_joint_cp3 = new Vector2(92.92435f,57.43371f);
    public Vector2 lower_leg_joint_cp4 = new Vector2(92.20259f,61.94468f);
    public Vector2 lower_leg_point_p1 = new Vector2(73.99222f,34.329586f);
    public Vector2 lower_leg_point_p2 = new Vector2(88.23736f,27.421244f);
    public Vector2 lower_leg_point_cp1 = new Vector2(75.12775f,51.149357f);
    public Vector2 lower_leg_point_cp2 = new Vector2(74.69429f,44.064724f);
    public Vector2 lower_leg_point_cp3 = new Vector2(89.11343f,43.25113f);
    public Vector2 lower_leg_point_cp4 = new Vector2(89.85493f,51.677227f);
    public Vector2 ankle_joint_p1 = new Vector2(71.8584f,30.496132f);
    public Vector2 ankle_joint_p2 = new Vector2(89.522285f,22.281052f);
    public Vector2 ankle_joint_cp1 = new Vector2(72.65528f,32.893154f);
    public Vector2 ankle_joint_cp2 = new Vector2(72.045845f,32.10089f);
    public Vector2 ankle_joint_cp3 = new Vector2(88.23736f,23.649841f);
    public Vector2 ankle_joint_cp4 = new Vector2(88.27134f,25.144812f);
    public Vector2 ankle_point_p1 = new Vector2(71.59556f,15.341827f);
    public Vector2 ankle_point_p2 = new Vector2(92.38249f,15.1305275f);
    public Vector2 ankle_point_cp1 = new Vector2(71.613365f,29.396698f);
    public Vector2 ankle_point_cp2 = new Vector2(71.548546f,23.02307f);
    public Vector2 ankle_point_cp4 = new Vector2(90.11405f,20.75232f);
    public Vector2 upper_leg_op = new Vector2(90.650894f,101.24236f);
    public Vector2 lower_leg_op = new Vector2(81.7781f,59.836754f);
    public Vector2 ankle_op = new Vector2(80.70174f,28.919535f);
    public Vector2 head_joint_p1 = new Vector2(75.465096f,161.5812f);
    public Vector2 head_joint_p2 = new Vector2(87.41812f,160.55281f);
    public Vector2 head_joint_cp1 = new Vector2(75.29535f,157.51541f);
    public Vector2 head_joint_cp2 = new Vector2(75.64235f,158.53162f);
    public Vector2 head_joint_cp3 = new Vector2(87.46508f,157.49062f);
    public Vector2 head_joint_cp4 = new Vector2(87.390724f,159.02733f);
    public Vector2 head_op = new Vector2(81.97323f,160.65874f);
    public Vector2 ski_point_p1 = new Vector2(-0.0589369f,2.2450256f);
    public Vector2 ski_point_p2 = new Vector2(247.92508f,2.06454f);
    public Vector2 ski_point_p3 = new Vector2(259.70474f,4.172912f);
    public Vector2 ski_point_p4 = new Vector2(250.1221f,-1.4989042f);
    public Vector2 ski_point_p5 = new Vector2(-0.06732733f,-1.5074154f);
    public Vector2 ski_point_cp1 = new Vector2(252.2996f,2.3310204f);
    public Vector2 ski_point_cp2 = new Vector2(256.53485f,3.3192453f);
    public Vector2 ski_point_cp3 = new Vector2(259.7051f,0.7882788f);
    public Vector2 ski_point_cp4 = new Vector2(253.0944f,-1.5781657f);
    public Vector2 boot_texture_point = new Vector2(71.08537f,1.9267664f);
    public Vector2 ski_support1_texture_point = new Vector2(70.790794f,1.9229751f);
    public Vector2 ski_support2_texture_point = new Vector2(109.55245f,2.0367956f);
    public Vector2 ankle_point_cp3 = new Vector2(90.3113f,19.322214f);
    public Vector2 head_texture_point = new Vector2(72.86618f,160.24896f);
    public Vector2 ski_op = new Vector2(110.23318f,2.899054f);
    public Vector2 shoulder_point_p1 = new Vector2(77.068954f,149.45653f);
    public Vector2 shoulder_point_p2 = new Vector2(77.12566f,124.06401f);
    public Vector2 shoulder_point_p3 = new Vector2(86.95053f,123.8873f);
    public Vector2 shoulder_point_p4 = new Vector2(87.1787f,148.59187f);
    public Vector2 shoulder_point_cp1 = new Vector2(79.09756f,153.58025f);
    public Vector2 shoulder_point_cp2 = new Vector2(77.268486f,152.11699f);
    public Vector2 shoulder_point_cp3 = new Vector2(76.856415f,145.94673f);
    public Vector2 shoulder_point_cp4 = new Vector2(76.934044f,128.40208f);
    public Vector2 shoulder_point_cp5 = new Vector2(87.18136f,128.47972f);
    public Vector2 shoulder_point_cp6 = new Vector2(86.870834f,143.15201f);
    public Vector2 forearm_joint_p1 = new Vector2(77.3135f,116.66874f);
    public Vector2 forearm_joint_p2 = new Vector2(86.809166f,116.85439f);
    public Vector2 forearm_joint_cp1 = new Vector2(77.26703f,122.12024f);
    public Vector2 forearm_joint_cp2 = new Vector2(77.19635f,119.22226f);
    public Vector2 forearm_joint_cp3 = new Vector2(86.70314f,118.76282f);
    public Vector2 forearm_joint_cp4 = new Vector2(86.809166f,121.413414f);
    public Vector2 forearm_point_p1 = new Vector2(77.16435f,100.233734f);
    public Vector2 forearm_point_p2 = new Vector2(85.63193f,99.87639f);
    public Vector2 forearm_point_cp1 = new Vector2(76.862015f,111.98388f);
    public Vector2 forearm_point_cp2 = new Vector2(76.90885f,102.9227f);
    public Vector2 forearm_point_cp3 = new Vector2(85.23617f,103.01841f);
    public Vector2 forearm_point_cp4 = new Vector2(86.88589f,111.02757f);
    public Vector2 wrist_joint_p1 = new Vector2(77.34695f,96.34702f);
    public Vector2 wrist_joint_p2 = new Vector2(85.59629f,96.33088f);
    public Vector2 wrist_joint_cp1 = new Vector2(77.26869f,99.26858f);
    public Vector2 wrist_joint_cp2 = new Vector2(77.34695f,97.85997f);
    public Vector2 wrist_joint_cp3 = new Vector2(85.66816f,97.8078f);
    public Vector2 wrist_joint_cp4 = new Vector2(85.64974f,97.66712f);
    public Vector2 arm_op = new Vector2(82.38877f,147.41856f);
    public Vector2 elbow_op = new Vector2(82.066246f,119.92537f);
    public Vector2 wrist_op = new Vector2(81.101326f,98.25629f);
    public Vector2 glove_texture_point = new Vector2(74.55323f,75.43808f);
    public Vector2 boot_joint_p1 = new Vector2(71.624084f,11.918189f);
    public Vector2 boot_joint_p2 = new Vector2(91.27848f,11.715688f);
    public Vector2 boot_joint_cp1 = new Vector2(71.70968f,13.744129f);
    public Vector2 boot_joint_cp2 = new Vector2(71.5385f,12.945281f);
    public Vector2 boot_joint_cp3 = new Vector2(91.60893f,12.7307825f);
    public Vector2 boot_joint_cp4 = new Vector2(91.3534f,13.676239f);
    public Vector2 boot_point_p1 = new Vector2(77.48764f,1.8274174f);
    public Vector2 boot_point_p2 = new Vector2(84.98299f,1.869298f);
    public Vector2 boot_point_cp1 = new Vector2(73.39476f,6.466009f);
    public Vector2 boot_point_cp2 = new Vector2(75.794495f,4.0262737f);
    public Vector2 boot_point_cp3 = new Vector2(89.68214f,5.8516273f);
    public Vector2 boot_point_cp4 = new Vector2(90.55825f,10.391483f);
    public Vector2 boot_op = new Vector2(81.417694f,13.618416f);
    public Vector2 shoulder_point_p5 = new Vector2(82.05732f,153.21443f);
    public Vector2 shoulder_point_cp7 = new Vector2(86.8794f,151.78442f);
    public Vector2 shoulder_point_cp8 = new Vector2(85.94824f,153.44722f);
    public Vector2 ski_down_center = new Vector2(90.96006f,0.64273834f);
    public Vector2 b2_head_p1 = new Vector2(73.027725f,182.35384f);
    public Vector2 b2_head_p2 = new Vector2(74.563f,156.44595f);
    public Vector2 b2_head_p3 = new Vector2(87.90077f,156.06213f);
    public Vector2 b2_head_p4 = new Vector2(93.46617f,182.16193f);
    public Vector2 b2_upper_torso_p1 = new Vector2(75.70192f,161.04411f);
    public Vector2 b2_upper_torso_p2 = new Vector2(71.40117f,120.654396f);
    public Vector2 b2_upper_torso_p3 = new Vector2(96.457756f,119.90644f);
    public Vector2 b2_upper_torso_p4 = new Vector2(88.97817f,159.36122f);
    public Vector2 b2_lower_torso_p1 = new Vector2(70.27923f,129.06892f);
    public Vector2 b2_lower_torso_p2 = new Vector2(71.77515f,97.280716f);
    public Vector2 b2_lower_torso_p3 = new Vector2(94.21388f,96.34577f);
    public Vector2 b2_lower_torso_p4 = new Vector2(96.644745f,129.25592f);
    public Vector2 b2_upper_leg_p1 = new Vector2(69.90525f,107.004166f);
    public Vector2 b2_upper_leg_p2 = new Vector2(75.570206f,55.287308f);
    public Vector2 b2_upper_leg_p3 = new Vector2(92.4568f,55.3321f);
    public Vector2 b2_upper_leg_p4 = new Vector2(95.43245f,105.913635f);
    public Vector2 b2_lower_leg_p1 = new Vector2(75.09791f,64.57119f);
    public Vector2 b2_lower_leg_p2 = new Vector2(72.20073f,30.403423f);
    public Vector2 b2_lower_leg_p3 = new Vector2(89.143036f,23.109924f);
    public Vector2 b2_lower_leg_p4 = new Vector2(92.369576f,63.599342f);
    public Vector2 b2_boot_p1 = new Vector2(71.417465f,14.868259f);
    public Vector2 b2_boot_p2 = new Vector2(71.03013f,3.4057822f);
    public Vector2 b2_boot_p3 = new Vector2(110.30306f,2.9287825f);
    public Vector2 b2_boot_p4 = new Vector2(92.4369f,14.980183f);
    public Vector2 b2_ski_p1 = new Vector2(0.2115341f,2.03586f);
    public Vector2 b2_ski_p2 = new Vector2(0.12965412f,-0.052079678f);
    public Vector2 b2_ski_p3 = new Vector2(259.0769f,0.45241427f);
    public Vector2 b2_ski_p4 = new Vector2(259.0769f,3.2546577f);
    public Vector2 b2_shoulder_p1 = new Vector2(77.42495f,151.64188f);
    public Vector2 b2_shoulder_p2 = new Vector2(77.071465f,116.4113f);
    public Vector2 b2_shoulder_p3 = new Vector2(87.086845f,117.35392f);
    public Vector2 b2_shoulder_p4 = new Vector2(86.379875f,151.7597f);
    public Vector2 b2_forearm_p1 = new Vector2(77.18929f,123.36315f);
    public Vector2 b2_forearm_p2 = new Vector2(77.6606f,97.32316f);
    public Vector2 b2_forearm_p3 = new Vector2(86.61553f,96.73402f);
    public Vector2 b2_forearm_p4 = new Vector2(86.96902f,123.48098f);
    public Vector2 b2_hand_p1 = new Vector2(76.613235f,99.54101f);
    public Vector2 b2_hand_p2 = new Vector2(76.45183f,79.050674f);
    public Vector2 b2_hand_p3 = new Vector2(87.74294f,78.147385f);
    public Vector2 b2_hand_p4 = new Vector2(86.37262f,99.29835f);
    public Vector2 b2_ankle_p1 = new Vector2(74.33323f,33.966526f);
    public Vector2 b2_ankle_p3 = new Vector2(91.1749f,11.377715f);
    public Vector2 b2_ankle_p4 = new Vector2(88.19168f,28.19222f);
    public Vector2 b2_ankle_p2 = new Vector2(72.00998f,11.920118f);
    ///////////////////////////////////////////////////////////////////////


    CurvePath headJointLeftPath = new CurvePath(upper_torso_p1, head_joint_cp1, head_joint_cp2, head_joint_p1);
    CurvePath headJointRightPath = new CurvePath(upper_torso_p4, head_joint_cp3, head_joint_cp4, head_joint_p2);

    CurvePath upperTorsoLeftPath = new CurvePath(upper_torso_p1, upper_torso_cp1, upper_torso_cp2, upper_torso_p2);
    CurvePath upperTorsoRightPath = new CurvePath(upper_torso_p4, upper_torso_cp4, upper_torso_cp3, upper_torso_p3);

    CurvePath lowerTorsoJointLeftPath = new CurvePath(upper_torso_p2, lower_torso_joint_cp1, lower_torso_joint_cp2, lower_torso_joint_p1);
    CurvePath lowerTorsoJointRightPath = new CurvePath(upper_torso_p3, lower_torso_joint_cp4, lower_torso_joint_cp3, lower_torso_joint_p2);

    CurvePath lowerTorsoLeftPath = new CurvePath(lower_torso_joint_p1, lower_torso_point_cp1, lower_torso_point_cp2, lower_torso_point_p1);
    CurvePath lowerTorsoRightPath = new CurvePath(lower_torso_joint_p2, lower_torso_point_cp4, lower_torso_point_cp3, lower_torso_point_p2);

    CurvePath upperLegJointLeftPath = new CurvePath(lower_torso_point_p1, upper_leg_joint_cp1, upper_leg_joint_cp2, upper_leg_joint_p1);
    CurvePath upperLegJointRightPath = new CurvePath(lower_torso_point_p2, upper_leg_joint_cp4, upper_leg_joint_cp3, upper_leg_joint_p2);

    CurvePath upperLegLeftPath = new CurvePath(upper_leg_joint_p1, upper_leg_cp1, upper_leg_cp2, upper_leg_p1);
    CurvePath upperLegRightPath = new CurvePath(upper_leg_joint_p2, upper_leg_cp4, upper_leg_cp3, upper_leg_p2);

    CurvePath lowerLegJointLeftPath = new CurvePath(upper_leg_p1, lower_leg_joint_cp1, lower_leg_joint_cp2, lower_leg_joint_p1);
    CurvePath lowerLegJointRightPath = new CurvePath(upper_leg_p2, lower_leg_joint_cp4, lower_leg_joint_cp3, lower_leg_joint_p2);

    CurvePath lowerLegLeftPath = new CurvePath(lower_leg_joint_p1, lower_leg_point_cp1, lower_leg_point_cp2, lower_leg_point_p1);
    CurvePath lowerLegRightPath = new CurvePath(lower_leg_joint_p2, lower_leg_point_cp4, lower_leg_point_cp3, lower_leg_point_p2);

    CurvePath ankleJointLeftPath = new CurvePath(lower_leg_point_p1, ankle_joint_cp1, ankle_joint_cp2, ankle_joint_p1);
    CurvePath ankleJointRightPath = new CurvePath(lower_leg_point_p2, ankle_joint_cp4, ankle_joint_cp3, ankle_joint_p2);

    CurvePath ankleLeftPath = new CurvePath(ankle_joint_p1, ankle_point_cp1, ankle_point_cp2, ankle_point_p1);
    CurvePath ankleRightPath = new CurvePath(ankle_joint_p2, ankle_point_cp4, ankle_point_cp3, ankle_point_p2);

    CurvePath bootJointLeftPath = new CurvePath(ankle_point_p1, boot_joint_cp1, boot_joint_cp2, boot_joint_p1);
    CurvePath bootJointRightPath = new CurvePath(ankle_point_p2, boot_joint_cp4, boot_joint_cp3, boot_joint_p2);

    CurvePath bootLeftPath = new CurvePath(boot_joint_p1, boot_point_cp1, boot_point_cp2, boot_point_p1);
    CurvePath bootRightPath = new CurvePath(boot_joint_p2, boot_point_cp4, boot_point_cp3, boot_point_p2);

    CurvePath shoulderLeftPath = new CurvePath(shoulder_point_p5, shoulder_point_cp1, shoulder_point_cp2, shoulder_point_p1, shoulder_point_cp3, shoulder_point_cp4, shoulder_point_p2);
    CurvePath shoulderRightPath = new CurvePath(shoulder_point_p5, shoulder_point_cp8, shoulder_point_cp7, shoulder_point_p4, shoulder_point_cp6, shoulder_point_cp5, shoulder_point_p3);

    CurvePath forearmJointLeftPath = new CurvePath(shoulder_point_p2, forearm_joint_cp1, forearm_joint_cp2, forearm_joint_p1);
    CurvePath forearmJointRightPath = new CurvePath(shoulder_point_p3, forearm_joint_cp4, forearm_joint_cp3, forearm_joint_p2);

    CurvePath forearmLeftPath = new CurvePath(forearm_joint_p1, forearm_point_cp1, forearm_point_cp2, forearm_point_p1);
    CurvePath forearmRightPath = new CurvePath(forearm_joint_p2, forearm_point_cp4, forearm_point_cp3, forearm_point_p2);

    CurvePath handJointLeftPath = new CurvePath(forearm_point_p1, wrist_joint_cp1, wrist_joint_cp2, wrist_joint_p1);
    CurvePath handJointRightPath = new CurvePath(forearm_point_p2, wrist_joint_cp4, wrist_joint_cp3, wrist_joint_p2);

    float minYarm = 96;
    float maxYarm = 153;
    float maxY = head_joint_p1.y;
    public float maxJumperX = ski_point_p3.x;
    public float maxJumperY = head_texture_point.y + 26;
    public float minJumperX = ski_point_p1.x;
    public float minJumperY= ski_point_p5.y;

    float minY = boot_point_p1.y;

    public JumperBodyPartBuilder(JumperOutfitTextures textures) {
        this.textures = textures;

    }

    public BodyPart getShoulder() {

        MeshVertex[][] meshVertices = generatePoints(shoulderLeftPath, shoulderRightPath, CURVE_POINTS_MESH, BETWEEN_POINTS_MESH, minYarm, maxYarm, textures.getWhiteDot());

        BodyPart shoulder = new BodyPart();
        shoulder.setMaxAngles(-180, 180);
        shoulder.setOrigin(arm_op);
        shoulder.setStaticVertices(meshVertices);
        shoulder.setBox2dBody(new Vector2[]{b2_shoulder_p1, b2_shoulder_p2, b2_shoulder_p3, b2_shoulder_p4});
        shoulder.build();
        return shoulder;
    }

    public BodyPart getForearm() {
        MeshVertex[][] jointPoints = generatePoints(forearmJointLeftPath, forearmJointRightPath, CURVE_POINTS_JOINT, BETWEEN_POINTS_JOINT, minYarm, maxYarm, textures.getWhiteDot());
        MeshVertex[][] meshVertices = generatePoints(forearmLeftPath, forearmRightPath, CURVE_POINTS_MESH, BETWEEN_POINTS_MESH, minYarm, maxYarm, textures.getWhiteDot());
        BodyPart foreArm = new BodyPart();
        foreArm.setMaxAngles(-10, 90);
        foreArm.setOrigin(elbow_op);
        foreArm.setJointVertices(jointPoints);
        foreArm.setBox2dBody(new Vector2[]{b2_forearm_p1, b2_forearm_p2, b2_forearm_p3, b2_forearm_p4});
        foreArm.setStaticVertices(meshVertices);

        MeshVertex.setForce(jointPoints[0], 0, 1f);

        for (int i = 0; i < jointPoints[0].length; i++) {
            if (jointPoints[jointPoints.length - 1][i].getOriginalPoint().y < elbow_op.y)
                jointPoints[jointPoints.length - 1][i].setRotationForce(1f);
            else
                jointPoints[jointPoints.length - 1][i].setRotationForce(0f);

        }

        for (int i = 1; i < jointPoints.length - 1; i++) {
            float percentage = i / (float) (jointPoints.length - 1);
            MeshVertex.setForce(jointPoints[i], 0f, 1f);

        }


        foreArm.build();
        return foreArm;
    }

    public BodyPart getWrist() {
        MeshVertex[][] jointPoints = generatePoints(handJointLeftPath, handJointRightPath, CURVE_POINTS_JOINT, BETWEEN_POINTS_JOINT, minYarm, maxYarm, textures.getWhiteDot());
        Vector2 origin = wrist_op;
        BodyPart wrist = new BodyPart();
        wrist.setMaxAngles(-20, 20);
        wrist.setOrigin(origin);
        wrist.setJointVertices(jointPoints);
        wrist.addOrientationPoint(glove_texture_point);
        wrist.setBox2dBody(new Vector2[]{b2_hand_p1, b2_hand_p2, b2_hand_p3, b2_hand_p4});

        MeshVertex.setForce(jointPoints[0], 0, 1f);

        for (int i = 0; i < jointPoints[0].length; i++) {
            if (jointPoints[jointPoints.length - 1][i].getOriginalPoint().y < origin.y)
                jointPoints[jointPoints.length - 1][i].setRotationForce(1f);
            else
                jointPoints[jointPoints.length - 1][i].setRotationForce(0f);

        }

        for (int i = 1; i < jointPoints.length - 1; i++) {
            float percentage = i / (float) (jointPoints.length - 1);
            MeshVertex.setForce(jointPoints[i], 0f, 1f);

        }
        wrist.build();
        return wrist;
    }

    public BodyPart getUpperTorso() {
        MeshVertex[][] meshVertices = generatePoints(upperTorsoLeftPath, upperTorsoRightPath, CURVE_POINTS_MESH, BETWEEN_POINTS_MESH, minY, maxY, textures.getWhiteDot());
        BodyPart upperTorso = new BodyPart();
        upperTorso.addOrientationPoint(lower_torso_op.cpy().lerp(head_op, 0.5f));
        upperTorso.setOrigin(new Vector2());
        upperTorso.setStaticVertices(meshVertices);
        upperTorso.setBox2dBody(new Vector2[]{b2_upper_torso_p1, b2_upper_torso_p2, b2_upper_torso_p3, b2_upper_torso_p4});
        upperTorso.build();
        return upperTorso;
    }

    public BodyPart getLowerTorso() {
        MeshVertex[][] jointPoints = generatePoints(lowerTorsoJointLeftPath, lowerTorsoJointRightPath, CURVE_POINTS_JOINT, BETWEEN_POINTS_JOINT, minY, maxY, textures.getWhiteDot());
        MeshVertex[][] meshVertices = generatePoints(lowerTorsoLeftPath, lowerTorsoRightPath, CURVE_POINTS_MESH, BETWEEN_POINTS_MESH, minY, maxY, textures.getWhiteDot());
        Vector2 origin = lower_torso_op;
        BodyPart lowerTorso = new BodyPart();
        lowerTorso.setMaxAngles(-10, 10);
        lowerTorso.setName("lowerTorso");
        lowerTorso.setOrigin(origin);
        lowerTorso.setJointVertices(jointPoints);
        lowerTorso.setBox2dBody(new Vector2[]{b2_lower_torso_p1, b2_lower_torso_p2, b2_lower_torso_p3, b2_lower_torso_p4});

        lowerTorso.setStaticVertices(meshVertices);

        for (int i = 0; i < jointPoints.length; i++)
            MeshVertex.setForce(jointPoints[i], 0, 1f);
        lowerTorso.build();
        return lowerTorso;
    }

    public BodyPart getUpperLeg() {
        MeshVertex[][] jointPoints = generatePoints(upperLegJointLeftPath, upperLegJointRightPath, CURVE_POINTS_JOINT, BETWEEN_POINTS_JOINT, minY, maxY, textures.getWhiteDot());
        MeshVertex[][] meshVertices = generatePoints(upperLegLeftPath, upperLegRightPath, CURVE_POINTS_MESH, BETWEEN_POINTS_MESH, minY, maxY, textures.getWhiteDot());
        BodyPart upperLeftleg = new BodyPart();
        upperLeftleg.setMaxAngles(-10, 180);
        upperLeftleg.setOrigin(upper_leg_op);
        upperLeftleg.setJointVertices(jointPoints);
        upperLeftleg.setStaticVertices(meshVertices);
        upperLeftleg.setBox2dBody(new Vector2[]{b2_upper_leg_p1, b2_upper_leg_p2, b2_upper_leg_p3, b2_upper_leg_p4});

        MeshVertex.setForce(jointPoints[0], 0, 1f);

        for (int i = 0; i < jointPoints[0].length; i++) {
            if (jointPoints[jointPoints.length - 1][i].getOriginalPoint().y < upper_leg_op.y)
                jointPoints[jointPoints.length - 1][i].setRotationForce(1f);
            else
                jointPoints[jointPoints.length - 1][i].setRotationForce(0f);

        }

        for (int i = 1; i < jointPoints.length - 1; i++) {
            float percentage = i / (float) (jointPoints.length - 1);
            MeshVertex.setForce(jointPoints[i], 0f, 1f);

        }


        upperLeftleg.build();
        return upperLeftleg;
    }

    public BodyPart getLowerLeg() {
        MeshVertex[][] jointPoints = generatePoints(lowerLegJointLeftPath, lowerLegJointRightPath, CURVE_POINTS_JOINT, BETWEEN_POINTS_JOINT, minY, maxY, textures.getWhiteDot());
        MeshVertex[][] meshVertices = generatePoints(lowerLegLeftPath, lowerLegRightPath, CURVE_POINTS_MESH, BETWEEN_POINTS_MESH, minY, maxY, textures.getWhiteDot());
        Vector2 origin = lower_leg_op;

        BodyPart lowerLeftLeg = new BodyPart();
        lowerLeftLeg.setMaxAngles(-170, 10);

        lowerLeftLeg.setOrigin(origin);
        lowerLeftLeg.setJointVertices(jointPoints);
        lowerLeftLeg.setStaticVertices(meshVertices);
        lowerLeftLeg.setBox2dBody(new Vector2[]{b2_lower_leg_p1, b2_lower_leg_p2, b2_lower_leg_p3, b2_lower_leg_p4});

        MeshVertex.setForce(jointPoints[jointPoints.length - 1], 0, 1f);

        for (int i = 0; i < jointPoints[0].length; i++) {
            if (jointPoints[0][i].getOriginalPoint().y < origin.y)
                jointPoints[0][i].setRotationForce(1f);
            else
                jointPoints[0][i].setRotationForce(0f);

        }

        for (int i = 1; i < jointPoints.length - 1; i++) {
            float percentage = i / (float) (jointPoints.length - 1);
            MeshVertex.setForce(jointPoints[i], 0f, 1f);
            /*
            for(int j = 0; j < jointPoints[i].length; j++){
                MeshVertex leftPoint = jointPoints[0][j];
                MeshVertex rightPoint = jointPoints[jointPoints.length-1][j];

                jointPoints[i][j].setRotationForce(MathUtils.lerp(leftPoint.getRotationForce(), rightPoint.getRotationForce(), percentage));
            }
            */
        }

        lowerLeftLeg.build();
        return lowerLeftLeg;
    }

    public BodyPart getAnkle() {
        MeshVertex[][] jointPoints = generatePoints(ankleJointLeftPath, ankleJointRightPath, CURVE_POINTS_JOINT, BETWEEN_POINTS_JOINT, minY, maxY, textures.getWhiteDot());
        MeshVertex[][] meshVertices = generatePoints(ankleLeftPath, ankleRightPath, CURVE_POINTS_MESH, BETWEEN_POINTS_MESH, minY, maxY, textures.getWhiteDot());
        Vector2 origin = ankle_op;
        BodyPart leftAnkle = new BodyPart();
        leftAnkle.setMaxAngles(-40, 40);
        leftAnkle.setOrigin(origin);
        leftAnkle.setJointVertices(jointPoints);
        leftAnkle.setStaticVertices(meshVertices);
        leftAnkle.setBox2dBody(new Vector2[]{b2_ankle_p1, b2_ankle_p2, b2_ankle_p3, b2_ankle_p4});


        MeshVertex.setForce(jointPoints[jointPoints.length - 1], 0, 1f);
        MeshVertex.setForce(jointPoints[0], 0, 1f);

        for (int i = 0; i < jointPoints[0].length; i++) {
            if (jointPoints[jointPoints.length - 1][i].getOriginalPoint().y < origin.y)
                jointPoints[jointPoints.length - 1][i].setRotationForce(1f);
            else
                jointPoints[jointPoints.length - 1][i].setRotationForce(0f);

        }
        jointPoints[jointPoints.length - 1][0].setRotationForce(0f);

        for (int i = 1; i < jointPoints.length - 1; i++) {
            MeshVertex.setForce(jointPoints[i], 0f, 1f);
        }

        leftAnkle.build();
        return leftAnkle;
    }

    public BodyPart getBoot() {
        MeshVertex[][] jointPoints = generatePoints(bootJointLeftPath, bootJointRightPath, CURVE_POINTS_JOINT, BETWEEN_POINTS_JOINT, minY, maxY, textures.getWhiteDot());
        MeshVertex[][] meshVertices = generatePoints(bootLeftPath, bootRightPath, CURVE_POINTS_MESH, BETWEEN_POINTS_MESH, minY, maxY, textures.getWhiteDot());
        Vector2 origin = boot_op;
        BodyPart leftBootBodyPart = new BodyPart();
        leftBootBodyPart.setMaxAngles(-40, 40);
        leftBootBodyPart.setOrigin(origin);
        leftBootBodyPart.setJointVertices(jointPoints);
        leftBootBodyPart.setStaticVertices(meshVertices);
        leftBootBodyPart.addOrientationPoint(boot_texture_point);
        leftBootBodyPart.addOrientationPoint(ski_op);
        leftBootBodyPart.addOrientationPoint(ski_down_center);
        leftBootBodyPart.setBox2dBody(new Vector2[]{b2_boot_p1, b2_boot_p2, b2_boot_p3, b2_boot_p4});

        MeshVertex.setForce(jointPoints[jointPoints.length - 1], 0, 1f);
        MeshVertex.setForce(jointPoints[0], 0, 1f);

        for (int i = 1; i < jointPoints.length - 1; i++) {
            MeshVertex.setForce(jointPoints[i], 0f, 1f);
        }

        leftBootBodyPart.build();
        return leftBootBodyPart;
    }

    public BodyPart getNeck() {
        MeshVertex[][] jointPoints = generatePoints(headJointLeftPath, headJointRightPath, CURVE_POINTS_JOINT, BETWEEN_POINTS_JOINT, minY, maxY, textures.getWhiteDot());
        Vector2 origin = head_op;
        BodyPart neck = new BodyPart();
        neck.setMaxAngles(-45, 45);
        neck.setOrigin(origin);
        neck.setJointVertices(jointPoints);
        neck.addOrientationPoint(head_texture_point);
        neck.setBox2dBody(new Vector2[]{b2_head_p1, b2_head_p2, b2_head_p3, b2_head_p4});

        for (int i = 0; i < jointPoints.length; i++)
            MeshVertex.setForce(jointPoints[i], 0, 1f);
        neck.build();
        return neck;
        // neck.setSkinningMode(SkinningMode.Linear);
    }

    public BodyPart getSki() {
        int skiMainPoints = 20;
        int skiCurvePoints = 3;

        CurvePath skiBottomCurve = new CurvePath(ski_point_p4, ski_point_cp4, ski_point_cp3, ski_point_p3);
        CurvePath skiTopCurve = new CurvePath(ski_point_p2, ski_point_cp1, ski_point_cp2, ski_point_p3);


        float minX = 0;
        float maxX = 260;

        MeshVertex[] skiTop1 = generateStraightPoints(ski_point_p1, ski_point_p2, skiMainPoints);
        MeshVertex[] skiTop2 = generatePoints(skiTopCurve, skiCurvePoints);

        MeshVertex[] skiBottom1 = generateStraightPoints(ski_point_p5, ski_point_p4, skiMainPoints);
        MeshVertex[] skiBottom2 = generatePoints(skiBottomCurve, skiCurvePoints);

        TextureRegion skiTexture = textures.getWhiteDot();

        for (MeshVertex point : skiTop1) {
            float xPercentage = MathUtils.clamp(point.getOriginalPoint().x / maxX, 0f, 1f);
            float yPercentage = 1f;
            point.setU(MathUtils.lerp(skiTexture.getU(), skiTexture.getU2(), xPercentage));
            point.setV(MathUtils.lerp(skiTexture.getV(), skiTexture.getV2(), yPercentage));
        }
        for (MeshVertex point : skiTop2) {
            float xPercentage = MathUtils.clamp(point.getOriginalPoint().x / maxX, 0f, 1f);
            float yPercentage = 1f;
            point.setU(MathUtils.lerp(skiTexture.getU(), skiTexture.getU2(), xPercentage));
            point.setV(MathUtils.lerp(skiTexture.getV(), skiTexture.getV2(), yPercentage));
        }
        for (MeshVertex point : skiBottom1) {
            float xPercentage = MathUtils.clamp(point.getOriginalPoint().x / maxX, 0f, 1f);
            float yPercentage = 0f;
            point.setU(MathUtils.lerp(skiTexture.getU(), skiTexture.getU2(), xPercentage));
            point.setV(MathUtils.lerp(skiTexture.getV(), skiTexture.getV2(), yPercentage));
        }
        for (MeshVertex point : skiBottom2) {
            float xPercentage = MathUtils.clamp(point.getOriginalPoint().x / maxX, 0f, 1f);
            float yPercentage = 0f;
            point.setU(MathUtils.lerp(skiTexture.getU(), skiTexture.getU2(), xPercentage));
            point.setV(MathUtils.lerp(skiTexture.getV(), skiTexture.getV2(), yPercentage));
        }

        MeshVertex[] skiTop = new MeshVertex[skiTop1.length + skiTop2.length];
        MeshVertex[] skiBottom = new MeshVertex[skiTop1.length + skiTop2.length];

        int i = 0;
        for (int j = 0; j < skiTop1.length; j++) skiTop[i++] = skiTop1[j];
        for (int j = 0; j < skiTop2.length; j++) skiTop[i++] = skiTop2[j];
        i = 0;
        for (int j = 0; j < skiBottom1.length; j++) skiBottom[i++] = skiBottom1[j];
        for (int j = 0; j < skiBottom2.length; j++) skiBottom[i++] = skiBottom2[j];

        MeshVertex[][] skiPoints = new MeshVertex[2][];
        skiPoints[0] = skiBottom;
        skiPoints[1] = skiTop;


        Vector2 origin = ski_op;
        BodyPart ski = new BodyPart();
        ski.setOrigin(new Vector2());
        ski.setStaticVertices(skiPoints);
        ski.addOrientationPoint(ski_support1_texture_point);
        ski.addOrientationPoint(ski_support2_texture_point);
        ski.addOrientationPoint(ski_op.cpy());
        ski.setBox2dBody(new Vector2[]{b2_ski_p1, b2_ski_p2, b2_ski_p3, b2_ski_p4});

        ski.build();
        return ski;

    }

    private MeshVertex[] generateStraightPoints(Vector2 v1, Vector2 v2, int points) {
        MeshVertex[] toReturn = new MeshVertex[points];
        for (int i = 0; i < points; i++) {
            float percent = i / (float) (points - 1);
            toReturn[i] = new MeshVertex(v1.cpy().lerp(v2, percent));

        }
        return toReturn;
    }

    private MeshVertex[] generatePoints(CurvePath left, int curvePoints) {
        MeshVertex[] leftMeshVertices = left.generateMeshPoints(curvePoints);

        return leftMeshVertices;

    }

    private MeshVertex[][] generatePoints(CurvePath left, CurvePath right,
                                          int curvePoints,
                                          float minY, float maxY,
                                          TextureRegion textureRegion) {
        int betweenPoints = 2;

        MeshVertex[] leftMeshVertices = left.generateMeshPoints(curvePoints);
        MeshVertex[] rightMeshVertices = right.generateMeshPoints(curvePoints);

        curvePoints = leftMeshVertices.length;


        for (int i = 0; i < leftMeshVertices.length; i++) {
            float vPercentageLeft = MathUtils.clamp(1 - (leftMeshVertices[i].getOriginalPoint().y - minY) / (maxY - minY), 0f, 1f);
            float vPercentageRight = MathUtils.clamp(1 - (rightMeshVertices[i].getOriginalPoint().y - minY) / (maxY - minY), 0f, 1f);


            leftMeshVertices[i].setU(
                    textureRegion.getU());
            leftMeshVertices[i].setV(
                    MathUtils.lerp(textureRegion.getV(), textureRegion.getV2(), vPercentageLeft));
            rightMeshVertices[i].setU(
                    textureRegion.getU2());
            rightMeshVertices[i].setV(
                    MathUtils.lerp(textureRegion.getV(), textureRegion.getV2(), vPercentageRight));
        }

        MeshVertex[][] toReturn = new MeshVertex[betweenPoints + 2][];
        toReturn[0] = leftMeshVertices;
        toReturn[toReturn.length - 1] = rightMeshVertices;

        for (int i = 0; i < betweenPoints; i++) {
            float percentage = (i + 1) / (float) (betweenPoints + 1);
            toReturn[i + 1] = new MeshVertex[curvePoints];

            for (int j = 0; j < curvePoints; j++) {
                toReturn[i + 1][j] = new MeshVertex(leftMeshVertices[j].getOriginalPoint().cpy().lerp(rightMeshVertices[j].getOriginalPoint(), percentage));
                MeshVertex point = toReturn[i + 1][j];

                float vPercentage = MathUtils.clamp(1 - (point.getOriginalPoint().y - minY) / (maxY - minY), 0f, 1f);
                point.setU(MathUtils.lerp(textureRegion.getU(), textureRegion.getU2(), percentage));
                point.setV(
                        MathUtils.lerp(textureRegion.getV(), textureRegion.getV2(), vPercentage));
            }

        }
        return toReturn;

    }


    private MeshVertex[][] generatePoints(CurvePath left, CurvePath right,
                                          int curvePoints, int betweenPoints,
                                          float minY, float maxY,
                                          TextureRegion textureRegion) {
        MeshVertex[] leftMeshVertices = left.generateMeshPoints(curvePoints);
        MeshVertex[] rightMeshVertices = right.generateMeshPoints(curvePoints);

        curvePoints = leftMeshVertices.length;


        for (int i = 0; i < leftMeshVertices.length; i++) {
            float vPercentageLeft = MathUtils.clamp(1 - (leftMeshVertices[i].getOriginalPoint().y - minY) / (maxY - minY), 0f, 1f);
            float vPercentageRight = MathUtils.clamp(1 - (rightMeshVertices[i].getOriginalPoint().y - minY) / (maxY - minY), 0f, 1f);


            leftMeshVertices[i].setU(
                    textureRegion.getU());
            leftMeshVertices[i].setV(
                    MathUtils.lerp(textureRegion.getV(), textureRegion.getV2(), vPercentageLeft));
            rightMeshVertices[i].setU(
                    textureRegion.getU2());
            rightMeshVertices[i].setV(
                    MathUtils.lerp(textureRegion.getV(), textureRegion.getV2(), vPercentageRight));
        }

        MeshVertex[][] toReturn = new MeshVertex[betweenPoints + 2][];
        toReturn[0] = leftMeshVertices;
        toReturn[toReturn.length - 1] = rightMeshVertices;

        for (int i = 0; i < betweenPoints; i++) {
            float percentage = (i + 1) / (float) (betweenPoints + 1);
            toReturn[i + 1] = new MeshVertex[curvePoints];

            for (int j = 0; j < curvePoints; j++) {
                toReturn[i + 1][j] = new MeshVertex(leftMeshVertices[j].getOriginalPoint().cpy().lerp(rightMeshVertices[j].getOriginalPoint(), percentage));
                MeshVertex point = toReturn[i + 1][j];

                float vPercentage = MathUtils.clamp(1 - (point.getOriginalPoint().y - minY) / (maxY - minY), 0f, 1f);
                point.setU(MathUtils.lerp(textureRegion.getU(), textureRegion.getU2(), percentage));
                point.setV(
                        MathUtils.lerp(textureRegion.getV(), textureRegion.getV2(), vPercentage));
            }

        }
        return toReturn;

    }


}